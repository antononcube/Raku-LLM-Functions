use v6.d;
use Test;

use lib <. lib>;
use LLM::Functions;

plan *;

## 1
subtest {
    # See https://docs.raku.org/language/pod#Declarator_blocks

    #| Base class for magicians
    class Magician {
        has Int $.level;
        has Str @.spells;
    }

    #| Fight mechanics.
    sub duel(
            Magician $a, #= First magician
            Magician $b, #= Second magician
            --> Int
             ) {
        return (rand > 0.5) + 1;
    }
    #= Magicians only, no mortals.

    #say sub-info(&duel);

    isa-ok sub-info(&duel), Map:D, 'expected type';

    is sub-info(&duel).keys.sort, <arguments arity count description name returns> , 'expected keys';

    is sub-info(&duel)<description>, 'Fight mechanics. Magicians only, no mortals.', 'exepcted description';

    is sub-info(&duel)<arguments> ~~ Array:D | List:D, True, 'parameters are given in an array';

    is-deeply
            sub-info(&duel)<arguments>[0],
            ${:default(Any), :description("First magician"), :name("\$a"), :named(Bool::False), :type("(Magician)")}
            'parameters are given in an array';

}, 'Magician duel sub';

done-testing;
