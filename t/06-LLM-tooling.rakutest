use v6.d;
use Test;

use lib <. lib>;
use LLM::Tooling;
use JSON::Fast;

plan *;

## 1
subtest {
    #| Fight mechanics.
    sub duel(
            Str:D $a, #= First magician
            Str:D $b, #= Second magician
            --> Int
             ) {
        return (rand > 0.5) + 1;
    }
    #= Magicians only, no mortals.

    isa-ok LLM::Tool.new(&duel), LLM::Tool:D, 'expected type';

    isa-ok LLM::Tool.new(&duel).spec, Str:D, 'spec is retrievable';

    isa-ok from-json(LLM::Tool.new(&duel).spec), Map:D, 'spec is a valid JSON';

}, 'Magician duel sub';

## 2
subtest {
    my %info = name => 'charscount', arguments => [{name => '$x', type => 'string', description => 'a string'}, ];
    isa-ok
            LLM::Tool.new(%info, -> Str:D $x { $x.chars} ),
            LLM::Tool:D,
            'expected type for creation on the spot';

    my $tool = LLM::Tool.new(%info, -> Str:D $x { $x.chars} );

    isa-ok $tool.spec, Str:D, 'spec is retrievable';

    isa-ok
            LLM::ToolRequest.new('charscount', %('$x' => 'more raccoons!')),
            LLM::ToolRequest:D,
            'expected request creation type';

    my $request = LLM::ToolRequest.new('charscount', %('$x' => 'more raccoons!'));

    isa-ok
            generate-llm-tool-response($tool, $request),
            LLM::ToolResponse:D,
            'expected generation with tools result';

    my $res = generate-llm-tool-response($tool, $request);

    is $res.output, 'more raccoons!'.chars, 'expected output';

}, 'String characters counting (simple one argument pure function)';


## 3
subtest {
    #| Another predator duel.
    sub duel(
            Str:D $p,                 #= Predator name
            Str:D $y,                 #= Yakuza name
            Int:D :$n = 5,            #= Number of attacks
            Numeric:D :$prob = 0.8,   #= Probability the predator to win
            Int:D :$film-year = 2010, #= Film year
            --> Str:D
             ) {
        return "The predator $p {rand â‰¤ $prob ?? 'wins over' !! 'loses to'} $y after $n attacks.";
    }

    isa-ok
            LLM::Tool.new(&duel),
            LLM::Tool:D,
            'expected type for creation on the spot';

    my $tool = LLM::Tool.new(&duel);

    isa-ok $tool.spec, Str:D, 'spec is retrievable';

    #note (spec => $tool.spec);

    isa-ok
            LLM::ToolRequest.new('duel', {'$y' => 'Hanzo', '$p' => 'Falconer', '$n' => 3, '$prob' => 1}),
            LLM::ToolRequest:D,
            'expected request creation type';

    my $request = LLM::ToolRequest.new('duel', {'$y' => 'Hanzo', '$p' => 'Falconer', '$n' => 3, '$prob' => 1}),

    isa-ok
            generate-llm-tool-response($tool, $request),
            LLM::ToolResponse:D,
            'expected generation with tools result';

    my $res = generate-llm-tool-response($tool, $request);

    is $res.output, 'The predator Falconer wins over Hanzo after 3 attacks.', 'expected output';

}, 'Two positional arguments and three named arguments sub';

done-testing;
